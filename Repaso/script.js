// 1.-
function sayHi() {
    console.log(name);
    console.log(age);
    var name = 'Lydia';
    let age = 21;
}

// Descomentar la siguiente l√≠nea:
//sayHi();

/* Respuesta correcta: undefined and ReferenceError
Dentro de la funci√≥n, primero declaramos la variable name con la palabra reservada var. Esto significa que 
la variable sube de √°mbito por el hoisting (el espacio de memoria se configura durante la fase de creaci√≥n) 
con el valor predeterminado de indefinido, hasta que realmente llegamos a la l√≠nea donde definimos la variable. 
A√∫n no hemos definido la variable en la l√≠nea 5, donde intentamos registrar la variable name, por lo que a√∫n 
mantiene el valor de undefined. Las variables con la palabra clave let (y const) suben de √°mbito por el hosting, 
pero a diferencia de var, no se inicializa. No son accesibles antes de la l√≠nea que los declaramos (inicializamos).
A esto se le llama "temporal dead zone". Cuando intentamos acceder a las variables antes de que se declaren, 
JavaScript lanza un ReferenceError */

// 2.-
// Descomentar la linea 24 a 30
/* for (var i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 1);
}

for (let i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 1);
} */

/* Respuesta correcta: 3 3 3 y 0 1 2
Debido a la cola de eventos en JavaScript, la funci√≥n setTimeout se llama una vez el ciclo se ha ejecutado.
Dado que la variable i en el primer for se declar√≥ utilizando la palabra reservada var, este valor es global.
Durante el primer for, incrementamos el valor de i en 1 cada vez, utilizando el operador unario ++. Cuando se
invoc√≥ la funci√≥n setTimeout, i era igual a 3 en el primer ejemplo.
En el segundo for, la variable i se declar√≥ utilizando la palabra reservada let: las variables declaradas con
la palabra reservada let (y const) tienen un √°mbito de bloque (un bloque es lo que se encuentra entre {}).
Durante cada iteraci√≥n, i tendr√° un nuevo valor, y cada valor se encuentra dentro del bucle.
Pueden revisar la documentaci√≥n de setTimeout en los siguientes links:
- https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout
- https://www.w3schools.com/js/js_timing.asp
Los siguientes links hablan del uso de setTimeout en los ciclos:
- https://medium.com/@axionoso/watch-out-when-using-settimeout-in-for-loop-js-75a047e27a5f
- https://coderwall.com/p/_ppzrw/be-careful-with-settimeout-in-loops
*/

// 3.-
const shape = {
    radius: 10,
    diameter() {
        return this.radius * 2;
    },
    perimeter: () => 2 * Math.PI * this.radius
};

console.log(shape.diameter());
console.log(shape.perimeter());

/* Respuesta correcta: 20 y NaN
Aqu√≠ que el valor de diameter es una funci√≥n regular o normal, mientras que el valor del 
perimeter es una funci√≥n arrow. Con las funciones arrow, la palabra clave this se 
refiere a su √°mbito actual, a diferencia de las funciones regulares. Esto significa que 
cuando llamamos a "perimeter", no se refiere al objeto en s√≠ mismo, sino a su √°mbito 
dentro de la definici√≥n de la funci√≥n arrow. No hay valor radius en ese objeto, que 
devuelve undefined.
 */


// 4.-
console.log(+true);
console.log(!'Lydia');

/* Respuesta correcta: 1 y false
En el primera caso se intenta convertir un operando en un n√∫mero. true es 1, y false es 0.
En el segundo caso la cadena 'Lydia' es un valor verdadero. La negaci√≥n resulta en false.
 */

// 5.-
const bird = {
    size: 'small',
};

const mouse = {
    name: 'Mickey',
    small: true,
};

/* Respuesta correcta: mouse.bird.size is not valid
En JavaScript, todas las llaves (keys) son cadenas (a menos que sea un s√≠mbolo). A pesar de 
que no podr√≠amos escribirlos como cadenas, siempre funcionan como cadenas de manera interna.
JavaScript interpreta declaraciones. Cuando usamos la notaci√≥n de corchetes, ve el corchete
de apertura [ y contin√∫a hasta que encuentra el corchete de cierre ]. Solo de esta manera 
se evaluar√° la afirmaci√≥n. 
mouse [bird.size]: Primero eval√∫a bird.size, que es"small". mouse ["small"] devuelve true
Sin embargo, con la notaci√≥n de puntos, esto no sucede. mouse no tiene una clave llamada bird, 
lo que significa que mouse.bird es undefined. Luego, pedimos el tama√±o usando la notaci√≥n de 
puntos: mouse.bird.size. Como mouse.bird es undefined, en realidad estamos preguntando undefined.size. 
Esto no es v√°lido y generar√° un error similar al Cannot read property "size" of undefined
 */

// 6.-
let c = { greeting: 'Hey!' };
let d;

d = c;
c.greeting = 'Hello';
console.log(d.greeting);

/* Respuesta correcta: Hello
En JavaScript, TODOS los objetos interact√∫an por referencia, de modo que cuando se establecen 
iguales o pasan a una funci√≥n, todos apuntan a la misma ubicaci√≥n. De esta manera cuando cambia 
un objeto, los cambia a todos. Primero, la variable c tiene un valor para un objeto. M√°s tarde, 
asignamos d con la misma referencia que c tiene al objeto. 

         C       D
          \     /
            Obj

Cuando cambias un objeto, cambian todos ellos.
 */

// 7.-
const fruit = ['üçå', 'üçä', 'üçé'];

fruit.slice(0, 1);
console.log(fruit);
fruit.splice(0, 1);
console.log(fruit);
fruit.unshift('üçá');
console.log(fruit);

/* Respuesta correcta: ['üçá', 'üçä', 'üçé']
Primero, invocamos el m√©todo slice en el arreglo fruit. El m√©todo slice no modifica el
arreglo original, pero regresa el valor que fue cortado del arreglo: el emoji üçå. Despu√©s,
invocamos el m√©todo splice en el arreglo fruit. El m√©todo splice no modifica el arreglo
original, por lo que el arreglo fruit ahora contiene ['üçä', 'üçé']. Finalmente, invocamos 
el m√©todo unshift en el arreglo fruit, este modifica el arreglo original agregando el valor
‚Äòüçá‚Äô, como el primer elemento del arreglo. El arreglo fruit ahora contiene ['üçá', 'üçä', 'üçé'].
 */

// 8.-
const emojis = ['üéÑ', 'üéÖüèº', 'üéÅ', '‚≠ê'];

/* 1 */ emojis.push('ü¶å');
/* 2 */ emojis.splice(0, 2);
/* 3 */ //emojis = [...emojis, 'ü•Ç'];
/* 4 */ emojis.length = 0;

/* Respuesta correcta: emojis = [...emojis, 'ü•Ç']; causa un error
La palabra reservada const quiere decir que no podemos redeclarar el valor de esa variable,
es de solo lectura. Sin embargo, el valor en s√≠ no es inmutable. Las propiedades en los 
emojis pueden modificarse, por ejemplo agregar nuevos valores, cambiar el tama√±o del arreglo 
a 0, empalmarlos.
Para informaci√≥n del operador SPREAD ... vean el siguiente link:
- https://www.codingame.com/playgrounds/7998/es6-tutorials-spread-operator-with-fun
- https://codeburst.io/a-simple-guide-to-destructuring-and-es6-spread-operator-e02212af5831
 */

// 9.-
const add = x => x + x;

function myFunc(num = 2, value = add(num)) {
    console.log(num, value);
}

myFunc();
myFunc(3);

/* Respuesta correcta: 2 4 y 3 6
Primero, invocamos myFunc() sin argumnentos. Ya que no enviamos argumentos, num y value 
obtienen sus valores por default: num es igual a 2, y value toma el valor regresado por 
la funci√≥n arrow add. A la funci√≥n add, pasamos num como argumento, el cual tiene el valor
de 2. add regresa 4, el cual es el valor de value. Despu√©s, invocamos myFunc(3) y 
pasamos 3 como valor del argumento num. No enviamos ning√∫n valor para el argumento value.
Este obtiene su valor de default: el valor retornado por la funci√≥n add. A add, pasamos
num, el cual tiene el valor 3. add regresa 6, este es el valor de value.
 */

// 10.-
const myFunc = ({ x, y, z }) => {
    console.log(x, y, z);
};

myFunc(1, 2, 3);

/* Respuesta correcta: undefined undefined undefined
myFunc espera un objeto con propiedades "x", "y" y "z" como argumento. Ya que solo
estamos pasando 3 valores numericos por separado (1, 2, 3) en lugar de un objeto con
las propiedades "x", "y" y "z" ({x: 1, y:2, z:3}), "x", "y" y "z" tienen su valor por
default undefined.
 */

// 11.-
function addToList(item, list) {
    return list.push(item);
}

const result = addToList('apple', ['banana']);
console.log(result);

/* Respuesta correcta: 2
¬°El m√©todo .push() devuelve la longitud del nuevo array! Al principio, el array conten√≠a 
un elemento (el string "banana") y ten√≠a una longitud de 1. Despu√©s de a√±adir el string 
"apple" al array, el array contiene dos elementos, y tiene una longitud de 2. Esto es lo 
que devuelve la funci√≥n addToList. El m√©todo push modifica el array original. Si quisieras 
devolver el array de la funci√≥n en lugar de la longitud del array deber√≠as haber devuelto 
list despu√©s de introducir item en √©l.
 */